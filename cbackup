#!/bin/bash

# WEBDAV URL of cloud-storage
cloudurl="https://magentacloud.de/remote.php/webdav"
clouduser="perlfan@t-online.de"
# Script returning password for WEBDAV URL, works like ssh-askpass - not part of this repo
extpass="/root/gcaskpass"
# Mount points for cloud and gocryptfs (encrypted fs on top of webdav)
export cloud="/root/magenta"
export backups="/root/backups"
# Source to rsync
srcdir="/ssd/backup-raspi"
# Room for rsync's tempfiles - honor environment var if set
tmpdir=${TMPDIR:-"/ssd/backup-raspi/tmp"}

# Default values for curopt and command flags
domount=1
doumount=1
dobackup=1
domountonly=0
doumountonly=0
dodryrun=0
dryrunflag=""
gocryptquietflag="-q"
verbose=0
vflag=""

# This is what -h gives you
function usage () {
    ((fd=$1+1))
    cat<<EOI >&$fd
Usage: $0 [curopt]
       -B         don't rsync - useful only for checking mounts
                  and dismounts
       -d         rsync dry-run - don't actually transfer data
       -h         this help
       -m         mount only
       -t <dir>   temporary directory for rsync
       -u         umount only
       -U         don't umount - useful if you want to check
                  your files after rsyncing
       -v         increase verbosity by 1 (can be specified 
                  multiple times).
		  Levels:
		  1 Provide messages of what is going on. 
		  2 Display important commands as they are 
		    executed (using set -x before and set +x 
		    after command execution) - includes all lowerr
		    levels
		  3 Reveal the gocryptfs master-key - includes
		    all lower levels
EOI
    exit $1
}
  
while getopts "Bdhmt:uUv" curopt
do
	  if [ $verbose -gt 3 ]; then
      echo "DBG: curopt=$curopt OPTIND=$OPTIND OPTARG=$OPTARG" >&2
	  fi
    case "$curopt" in
	B)
	   dobackup=0
	   ;;
	d)
	   dodryrun=1
	   dryrunflag="--dry-run"
	   ;;
        h)
	   usage 0
	   ;;
	m)
	   domountonly=1
	   ;;
	t)
     tmpdir=${OPTARG}
	   ;;
	u)
	   doumountonly=1
	   ;;
	U)
	   doumount=0
	   ;;
	v)
     ((verbose++))
	   vflag="${vflag}v"
	   ;;
  *)
	   usage 1
	   ;;
    esac
done

# Function to determine mount
# status of a filesystem
function ismounted() {
	grep -q " $1 " /proc/mounts
	return $?
}

function cleanup {
    # Dismount both systems
		ismounted ${backups}
		if [ $? = 0 ];then
      if [ $verbose -gt 0 ]; then
        echo "Umounting ${backups}"
      fi 
      /bin/fusermount -u "${backups}"
    else
        if [ $verbose -gt 0 ]; then
          echo "Not umounting ${backups} - it was not mounted"
        fi 
    fi
		ismounted ${cloud}
		if [ $? = 0 ];then
        if [ $verbose -gt 0 ]; then
            echo "Umounting ${cloud}"
        fi 
        umount "${cloud}"&&echo umounted $cloud
    else
        if [ $verbose -gt 0 ]; then
            echo "Not umounting ${cloud} - it was not mounted"
        fi 
    fi
		# This is end of cleanuo
		# function so we exit here
    exit
}

# Handle interrupts - do cleanup then
trap cleanup INT ABRT KILL # TERM HUP  QUIT 

# Only umount if -U
if [ $doumountonly = 1 ]; then
    cleanup # cleanup exits!
fi

# Only mount if requested
if [ $domount = 1 ];then
    # Mount cloud space - if needed
		ismounted ${cloud}
		if [ $? != 0 ];then
        if [ $verbose -gt 0 ]; then
            echo "Mounting ${cloud}"
        fi 
        /root/mcextpass|mount -t davfs -o _netdev,noauto,noexec,nosuid,nodev,conf=~/.davfs2-magenta.conf,username=${clouduser} "${cloudurl}" "${cloud}" > /dev/null&&echo mounted $cloud
    else
        if [ $verbose -gt 0 ]; then
            echo "Not mounting ${cloud} - it is already mounted"
        fi 
			fi
    # Mount gocrypt directory on cloud space - if needed
		ismounted {backups}
		if [ $? != 0 ];then
        if [ $verbose -gt 0 ]; then
            echo "Mounting ${backups}"
        fi 
	if [ $verbose -gt 2 ]; then
            gocryptquietflag=""
	fi
        /usr/bin/gocryptfs ${gocryptquietflag} -extpass "${extpass}" "${cloud}/backups" "${backups}"
    else
	if [ $verbose -gt 0 ]; then
            echo "Not mounting ${backups} - it is already mounted"
        fi 
    fi
fi

# Exit after mounts - if -m
if [ $domountonly = 1 ]; then
    exit 0
fi

echo ${tmpdir}
echo ${TMPDIR}

if [ $dobackup = 1 ]; then
    export TMPDIR="${tmpdir}"
    if [ $verbose -gt 0 ]; then
	echo "Running backup (rsync)"
    fi 
    if [ $verbose -gt 1 ]; then set -x; fi 
/usr/bin/rsync --size-only ${dryrunflag} -a${vflag}z -T "${tmpdir}" "${srcdir}" "${backups}"
    if [ $verbose -gt 1 ]; then set +x; fi 
    unset TMPDIR
else
    if [ $verbose -gt 0 ]; then
	echo "Not running backup (rsync) on request (-B)"
    fi 
fi

if [ $doumount = 1 ];then
    cleanup # cleanup exits!
else
    if [ $verbose -gt 0 ]; then
        echo "Not umounting ${backups} and ${cloud} on request"
    fi 
fi
exit
